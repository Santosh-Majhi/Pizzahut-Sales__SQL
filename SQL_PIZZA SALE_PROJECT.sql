CREATE DATABASE PIZZAHUT;
USE PIZZAHUT;



CREATE TABLE ORDERS(
ORDER_ID INT NOT NULL,
ORDER_DATE DATE NOT NULL,
ORDER_TIME TIME NOT NULL,
PRIMARY KEY(ORDER_ID));

SELECT ORDER_DATE FROM ORDERS;


CREATE TABLE ORDER_DETAILS(
ORDER_DETAILS_ID INT NOT NULL,
ORDER_ID INT NOT NULL,
PIZZA_ID TEXT NOT NULL,
QUANTITY INT NOT NULL,
PRIMARY KEY(ORDER_DETAILS_ID));

SELECT * FROM ORDER_DETAILS;
SELECT * FROM ORDERS;
SELECT * FROM PIZZA_TYPES; 
SELECT * FROM PIZZAS;


-- RETRIEVE THE TOTAL NUMBER OF ORDERS PLACED

SELECT COUNT(ORDER_ID) AS TOTAL_ORDERS FROM ORDERS;

-- CALCULATE THE TOTAL REVENUE GENERATED FROM PIZZA SALES

SELECT 
    ROUND(SUM(O.QUANTITY * P.PRICE), 2) AS TOTAL_REVENUE
FROM
    ORDER_DETAILS AS O                           -- CONTROL + B FOR BEAUTIFYING
        JOIN
    PIZZAS AS P ON O.PIZZA_ID = P.PIZZA_ID;
    
-- IDENTIFY THE HIGHEST PRICED PIZZA

SELECT P2.NAME, P1.PIZZA_ID,P1.PRICE FROM PIZZAS AS P1
JOIN PIZZA_TYPES P2
ON P1.PIZZA_TYPE_ID=P2.PIZZA_TYPE_ID
WHERE P1.PRICE=(SELECT MAX(PRICE) FROM PIZZAS);  

SELECT P2.NAME, P1.PIZZA_ID, P1.PRICE FROM PIZZAS AS P1       -- ALTERNATE METHOD
JOIN PIZZA_TYPES AS P2
ON P1.PIZZA_TYPE_ID=P2.PIZZA_TYPE_ID
ORDER BY PRICE DESC
LIMIT 1;  

-- IDENTIFY THE MOST COMMON PIZZA ORDERED

SELECT P.SIZE, COUNT(O.ORDER_DETAILS_ID) FROM ORDER_DETAILS AS O
JOIN PIZZAS AS P
ON O.PIZZA_ID= P.PIZZA_ID
GROUP BY P.SIZE
ORDER BY COUNT(O.ORDER_DETAILS_ID) DESC
LIMIT 1;     


-- LIST THE TOP 5 MOST ORDERED PIZZA TYPES ALONG WITH THEIR QUANTITIES


SELECT T.NAME,SUM(O.QUANTITY) AS QTY FROM PIZZA_TYPES AS T
JOIN PIZZAS AS P
ON T.PIZZA_TYPE_ID=P.PIZZA_TYPE_ID
JOIN ORDER_DETAILS AS O
ON O.PIZZA_ID=P.PIZZA_ID
GROUP BY T.NAME
ORDER BY QTY DESC 
LIMIT 5;


-- JOIN THE NECESSARY TABLES TO FIND THE TOTAL QUANTITY OF EACH PIZZA CATEGORY ORDERED

SELECT T.CATEGORY,SUM(O.QUANTITY) AS QTY FROM ORDER_DETAILS AS O
JOIN PIZZAS AS P
ON O.PIZZA_ID=P.PIZZA_ID
JOIN PIZZA_TYPES AS T
ON P.PIZZA_TYPE_ID=T.PIZZA_TYPE_ID
GROUP BY CATEGORY;


-- DETERMINE THE DISTRIBUTION OF ORDERS BY HOUR OF THE DAY

SELECT 
    HOUR(ORDER_TIME) AS HOUR, COUNT(ORDER_ID) AS ORDER_COUNT
FROM
    ORDERS
GROUP BY HOUR(ORDER_TIME);


-- FIND THE CATEGORY WISE DISTRIBUTION OF PIZZAS

SELECT CATEGORY, COUNT(NAME) FROM PIZZA_TYPES
GROUP BY CATEGORY; 


-- GROUPS THE ORDER BY DATE AND CALCULATE THE AVERAGE NUMBER OF PIZZAS ORDERED PER DAY.

SELECT ROUND(AVG(QUANTITY)) AS AVG_PIZZAS_ORDERED_PER_DAY FROM
(SELECT O1.ORDER_DATE, SUM(O2.QUANTITY) AS QUANTITY FROM ORDERS AS O1
JOIN ORDER_DETAILS AS O2
ON O1.ORDER_ID=O2.ORDER_ID
GROUP BY O1.ORDER_DATE) AS ORDER_QUANTITY;



-- DETERMINE THE TOP 3 ORDERED PIZZA TYPES BASED ON REVENUE 

SELECT C.NAME,SUM(A.QUANTITY*B.PRICE) AS REVENUE FROM ORDER_DETAILS AS A
JOIN PIZZAS AS B
ON A.PIZZA_ID=B.PIZZA_ID
JOIN PIZZA_TYPES AS C
ON B.PIZZA_TYPE_ID=C.PIZZA_TYPE_ID
GROUP BY C.NAME
ORDER BY REVENUE DESC
LIMIT 3;


-- CALCULATE THE PERCENTAGE CONTRIBUTION OF EACH PIZZA TYPE TO TOTAL REVENUE

SELECT C.CATEGORY,ROUND((SUM(A.QUANTITY*B.PRICE)/(SELECT SUM(A.QUANTITY * B.PRICE)
                                        FROM ORDER_DETAILS AS A
                                        JOIN  PIZZAS AS B                              
                                         ON A.PIZZA_ID = B.PIZZA_ID))*100 ,2) AS REVENUE      
FROM ORDER_DETAILS AS A
JOIN PIZZAS AS B
ON A.PIZZA_ID=B.PIZZA_ID
JOIN PIZZA_TYPES AS C
ON B.PIZZA_TYPE_ID=C.PIZZA_TYPE_ID
GROUP BY C.CATEGORY
ORDER BY REVENUE DESC;


-- ANALYZE THE CUMULATIVE REVENUE GENERATED OVER TIME

SELECT ORDER_DATE,ROUND(SUM(REVENUE) OVER(ORDER BY ORDER_DATE),2 )AS CUM_REVENUE
FROM (SELECT C.ORDER_DATE,SUM(A.QUANTITY*B.PRICE) AS REVENUE FROM ORDER_DETAILS AS A
JOIN PIZZAS AS B
ON A.PIZZA_ID=B.PIZZA_ID
JOIN ORDERS AS C
ON A.ORDER_ID=C.ORDER_ID
GROUP BY ORDER_DATE) AS SALES;


-- DETERMINE THE TOP 3 MOST ORDERED PIZZA TYPES BASED ON THE REVENUE FOR EACH PIZZA CATAGORY

SELECT CATEGORY,REVENUE 
FROM
(SELECT CATEGORY,NAME,REVENUE,
RANK() OVER (partition by CATEGORY ORDER BY REVENUE DESC) AS RNK
FROM
(SELECT C.CATEGORY,C.NAME,SUM(A.QUANTITY*B.PRICE) AS REVENUE  FROM ORDER_DETAILS AS A
JOIN PIZZAS AS B
ON A.PIZZA_ID=B.PIZZA_ID
JOIN PIZZA_TYPES AS C
ON B.PIZZA_TYPE_ID=C.PIZZA_TYPE_ID
GROUP BY C.NAME,C.CATEGORY
ORDER BY REVENUE DESC) AS ABC) AS XYZ
WHERE RNK<=3;

    